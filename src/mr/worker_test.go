package mr

import (
	"log"
	"strconv"
	"strings"
	"testing"
	"unicode"
)

func TestWorker_HandleMapTask(t *testing.T) {
	reply := AskForTaskResponse{ExistTask: true, TaskType: MAP, TaskNo: "MAPTASK_0",
		FilePaths: []string{"../main/pg-being_ernest.txt"}, ReduceCount: 10}
	log.Println("result1：", handleMapTask(&reply, Map))
	reply = AskForTaskResponse{ExistTask: true, TaskType: MAP, TaskNo: "MAPTASK_1",
		FilePaths: []string{"../main/pg-dorian_gray.txt"}, ReduceCount: 10}
	log.Println("result2：", handleMapTask(&reply, Map))
}

func TestWorker_HandleReduceTask(t *testing.T) {
	reply := AskForTaskResponse{ExistTask: true, TaskType: REDUCE, TaskNo: "REDUCETASK_0",
		FilePaths: []string{"mr-MAPTASK_0-0", "mr-MAPTASK_1-0"}, ReduceCount: 10}
	log.Println("result1：", handleReduceTask(&reply, Reduce))
}

func Map(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
